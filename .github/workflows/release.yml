name: Release
run-name: Release ${{ github.ref == 'refs/heads/main' && 'nightly' || github.ref_name }} by @${{ github.actor }}

permissions:
  contents: write

on:
  push:
    tags:
      - nightly
      - v[0-9]+.*
  workflow_run:
    workflows:
      - Rust
    branches:
      - main
    types:
      - completed
  # Run manually
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  CARGO_TERM_COLOR: always
  AWS_LC_SYS_PREBUILT_NASM: 1
  PLUGIN_REPOSITORY: "sys"
  PLUGINS: "binary config file json system-environment"

jobs:
  create-or-update-nightly-tag:
    name: Create or Update Nightly Tag
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    steps:
      - name: VCS Checkout
        uses: actions/checkout@v5
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: Update Tag nightly
        continue-on-error: true
        run: |
          git config user.name "Reactive Graph"
          git config user.email "info@reactive-graph.io"
          git show nightly || true
          git log --oneline
          git tag -d nightly || true
          git tag --annotate --message "Nightly Release" --sign nightly || true
          git push --force origin nightly
          git show nightly || true
          git log --oneline --decorate
  create-release:
    name: Create Release
    if: startsWith(github.event.ref, 'refs/tags/v')
    runs-on: ubuntu-22.04
    steps:
      - name: VCS Checkout
        uses: actions/checkout@v5
      - name: Create GitHub Release
        uses: taiki-e/create-gh-release-action@v1
        with:
          changelog: CHANGELOG.md
          token: ${{ secrets.GITHUB_TOKEN }}
  upload-assets:
    name: Binary
    needs: [ create-or-update-nightly-tag, create-release ]
    if: always() && (!contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled'))
    strategy:
      fail-fast: false
      matrix:
        include:
          # Tier 1
          # ARM64 Linux (kernel 4.1, glibc 2.17+)
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04-arm
            prefix: lib
            extension: .so
            archive_format: tar.gz
          # ARM64 macOS (11.0+, Big Sur+)
          - target: aarch64-apple-darwin
            os: macos-latest
            prefix: lib
            extension: .dylib
            archive_format: tar.gz
          # 32-bit Linux (kernel 3.2+, glibc 2.17+) 1
          - target: i686-unknown-linux-gnu
            os: ubuntu-22.04
            prefix: lib
            extension: .so
            archive_format: tar.gz
          # 64-bit macOS (10.12+, Sierra+)
          - target: x86_64-apple-darwin
            os: macos-latest
            prefix: lib
            extension: .dylib
            archive_format: tar.gz
          # 64-bit MinGW (Windows 10+, Windows Server 2016+)
          - target: x86_64-pc-windows-gnu
            os: ubuntu-22.04
            prefix: ""
            extension: .dll
            archive_format: zip
          # 64-bit MSVC (Windows 10+, Windows Server 2016+)
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            prefix: ""
            extension: .dll
            archive_format: zip
          # 64-bit Linux (kernel 3.2+, glibc 2.17+)
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
            prefix: lib
            extension: .so
            archive_format: tar.gz
          # Universal macOS binary is supported as universal-apple-darwin.
          - target: universal-apple-darwin
            os: macos-latest
            prefix: lib
            extension: .dylib
            archive_format: tar.gz
          # Tier 2
          # Armv7-A Linux, hardfloat (kernel 3.2, glibc 2.17)
          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-22.04-arm
            prefix: lib
            extension: .so
            archive_format: tar.gz
          # PowerPC Linux (kernel 3.2, glibc 2.17)
          - target: powerpc-unknown-linux-gnu
            os: ubuntu-22.04
            prefix: lib
            extension: .so
            archive_format: tar.gz
          # PPC64 Linux (kernel 3.2, glibc 2.17)
          - target: powerpc64-unknown-linux-gnu
            os: ubuntu-22.04
            prefix: lib
            extension: .so
            archive_format: tar.gz
          # PPC64LE Linux (kernel 3.10, glibc 2.17)
          - target: powerpc64le-unknown-linux-gnu
            os: ubuntu-22.04
            prefix: lib
            extension: .so
            archive_format: tar.gz
          # RISC-V Linux (kernel 4.20, glibc 2.29)
          - target: riscv64gc-unknown-linux-gnu
            os: ubuntu-22.04
            prefix: lib
            extension: .so
            archive_format: tar.gz
    runs-on: ${{ matrix.os }}
    steps:
      - name: VCS Checkout
        uses: actions/checkout@v5
      - name: Get version number from git tag
        id: tag
        uses: devops-actions/action-get-tag@v1.0.3
        with:
          strip_v: true
          default: nightly
      - name: Install Compiler Tools for Target i686-unknown-linux-gnu
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: binutils-i686-linux-gnu gcc-i686-linux-gnu
          version: 1.0
        if: matrix.target == 'i686-unknown-linux-gnu'
      - name: Install Compiler Tools for Target x86_64-pc-windows-gnu
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: binutils-mingw-w64-x86-64 gcc-mingw-w64-x86-64 nasm
          version: 1.0
        if: matrix.target == 'x86_64-pc-windows-gnu'
      - name: Install Compiler Tools for Target armv7-unknown-linux-gnueabihf
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: binutils-arm-linux-gnueabihf gcc-arm-linux-gnueabihf
          version: 1.0
        if: |
          matrix.target == 'armv7-unknown-linux-gnueabihf'
      - name: Install Compiler Tools for Target powerpc-unknown-linux-gnu
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: binutils-powerpc-linux-gnu gcc-powerpc-linux-gnu
          version: 1.0
        if: matrix.target == 'powerpc-unknown-linux-gnu'
      - name: Install Compiler Tools for Target powerpc64-unknown-linux-gnu
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: binutils-powerpc64-linux-gnu gcc-powerpc64-linux-gnu
          version: 1.0
        if: matrix.target == 'powerpc64-unknown-linux-gnu'
      - name: Install Compiler Tools for Target powerpc64le-unknown-linux-gnu
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: binutils-powerpc64le-linux-gnu gcc-powerpc64le-linux-gnu
          version: 1.0
        if: matrix.target == 'powerpc64le-unknown-linux-gnu'
      - name: Install Compiler Tools for Target riscv64gc-unknown-linux-gnu
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: binutils-riscv64-linux-gnu gcc-riscv64-linux-gnu
          version: 1.0
        if: matrix.target == 'riscv64gc-unknown-linux-gnu'
      - name: Set AWS_LC_SYS_CFLAGS on powerpc-unknown-linux-gnu
        run: echo 'AWS_LC_SYS_CFLAGS="-Wno-stringop-overflow"' >> "$GITHUB_ENV"
        if: matrix.target == 'powerpc-unknown-linux-gnu'
      # The flag below is set to avoid the following error with GCC 11.4.0 on the riscv64 platform:
      # error: 'strncmp' of strings of length 1 and 9 and bound of 9 evaluates to nonzero [-Werror=string-compare]
      - name: Set AWS_LC_SYS_CFLAGS on riscv64gc-unknown-linux-gnu
        run: echo 'AWS_LC_SYS_CFLAGS="-Wno-string-compare"' >> "$GITHUB_ENV"
        if: matrix.target == 'riscv64gc-unknown-linux-gnu'
      - name: Set optimization level 2 for powerpc targets
        run: echo 'CARGO_PROFILE_RELEASE_OPT_LEVEL=2' >> "$GITHUB_ENV"
        if: |
          matrix.target == 'powerpc-unknown-linux-gnu' ||
          matrix.target == 'powerpc64-unknown-linux-gnu' ||
          matrix.target == 'powerpc64le-unknown-linux-gnu'
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.target }}
        if: matrix.target != 'universal-apple-darwin'
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: "x86_64-apple-darwin, aarch64-apple-darwin"
        if: matrix.target == 'universal-apple-darwin'
      - name: Install bindgen-cli
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: bindgen-cli
        if: |
          matrix.target == 'i686-unknown-linux-gnu' ||
          matrix.target == 'x86_64-pc-windows-gnu' ||
          matrix.target == 'armv7-unknown-linux-gnueabihf' ||
          matrix.target == 'powerpc-unknown-linux-gnu' ||
          matrix.target == 'powerpc64-unknown-linux-gnu' ||
          matrix.target == 'powerpc64le-unknown-linux-gnu' ||
          matrix.target == 'riscv64gc-unknown-linux-gnu'
      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: |
          matrix.target == 'i686-unknown-linux-gnu' ||
          matrix.target == 'x86_64-pc-windows-gnu' ||
          matrix.target == 'armv7-unknown-linux-gnueabihf' ||
          matrix.target == 'powerpc-unknown-linux-gnu' ||
          matrix.target == 'powerpc64-unknown-linux-gnu' ||
          matrix.target == 'powerpc64le-unknown-linux-gnu' ||
          matrix.target == 'riscv64gc-unknown-linux-gnu'
      - name: Build Dynamic Link Libraries
        run: cargo build --release --target ${{ matrix.target }}
        if: matrix.target != 'universal-apple-darwin'
      - name: Build Dynamic Link Libraries (universal-apple-darwin)
        run: |
          cargo build --release --target x86_64-apple-darwin
          cargo build --release --target aarch64-apple-darwin
          mkdir -p target/universal-apple-darwin/release
          for PLUGIN in ${{env.PLUGINS}}; do
            lipo \
              -create \
                target/x86_64-apple-darwin/release/${{matrix.prefix}}reactive_graph_${{env.PLUGIN_REPOSITORY}}_${PLUGIN//-/_}${{matrix.extension}} \
                target/aarch64-apple-darwin/release/${{matrix.prefix}}reactive_graph_${{env.PLUGIN_REPOSITORY}}_${PLUGIN//-/_}${{matrix.extension}} \
              -output \
                target/universal-apple-darwin/release/${{matrix.prefix}}reactive_graph_${{env.PLUGIN_REPOSITORY}}_${PLUGIN//-/_}${{matrix.extension}}
          done
        if: matrix.target == 'universal-apple-darwin'
      - name: Create Release Archive
        id: archive
        uses: ksm2/archive-action@v1
        with:
          name: 'reactive-graph-${{env.PLUGIN_REPOSITORY}}_${{steps.tag.outputs.tag}}_${{ matrix.target }}'
          format: ${{ matrix.archive_format }}
          root-directory: 'target/${{ matrix.target }}/release/'
          include: '${{ matrix.prefix }}reactive_graph_${{env.PLUGIN_REPOSITORY}}_*${{ matrix.extension }}'
      - name: Upload Regular Release Archive to GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.archive.outputs.path }}
        if: startsWith(github.event.ref, 'refs/tags/v')
      - name: Upload Nightly Release Archive to GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.archive.outputs.path }}
          tag_name: nightly
        if: github.ref == 'refs/heads/main'
  debian-package:
    name: Debian package
    needs: [ create-or-update-nightly-tag, create-release ]
    if: always() && (!contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled'))
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            # libc 2.35
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-gnu
            # libc 2.35
            os: ubuntu-22.04-arm
          - target: i686-unknown-linux-gnu
            # libc 2.35
            os: ubuntu-22.04
          - target: armv7-unknown-linux-gnueabihf
            # libc 2.35
            os: ubuntu-22.04-arm
          - target: powerpc-unknown-linux-gnu
            # libc 2.35
            os: ubuntu-22.04
          - target: powerpc64-unknown-linux-gnu
            # libc 2.35
            os: ubuntu-22.04
          - target: powerpc64le-unknown-linux-gnu
            # libc 2.39
            os: ubuntu-24.04
          - target: riscv64gc-unknown-linux-gnu
            # libc 2.35
            os: ubuntu-22.04
    runs-on: ${{ matrix.os }}
    steps:
      - name: VCS Checkout
        uses: actions/checkout@v5
      - name: Get version number from git tag
        id: tag
        uses: devops-actions/action-get-tag@v1.0.3
        with:
          strip_v: true
          default: nightly
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      - name: Install Compiler Tools for Target aarch64
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu
          version: 1.0
        if: matrix.target == 'aarch64-unknown-linux-gnu'
      - name: Install Compiler Tools for Target i686-unknown-linux-gnu
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: binutils-i686-linux-gnu gcc-i686-linux-gnu
          version: 1.0
        if: matrix.target == 'i686-unknown-linux-gnu'
      - name: Install Compiler Tools for Target armv7-unknown-linux-gnueabihf
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: binutils-arm-linux-gnueabihf gcc-arm-linux-gnueabihf
          version: 1.0
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
      - name: Install Compiler Tools for Target powerpc-unknown-linux-gnu
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: binutils-powerpc-linux-gnu gcc-powerpc-linux-gnu g++-powerpc-linux-gnu
          version: 1.0
        if: matrix.target == 'powerpc-unknown-linux-gnu'
      - name: Install Compiler Tools for Target powerpc64-unknown-linux-gnu
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: binutils-powerpc64-linux-gnu gcc-powerpc64-linux-gnu g++-powerpc64-linux-gnu
          version: 1.0
        if: matrix.target == 'powerpc64-unknown-linux-gnu'
      - name: Install Compiler Tools for Target powerpc64le-unknown-linux-gnu
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: binutils-powerpc64le-linux-gnu gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu
          version: 1.0
        if: matrix.target == 'powerpc64le-unknown-linux-gnu'
      - name: Install Compiler Tools for Target riscv64gc-unknown-linux-gnu
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: binutils-riscv64-linux-gnu gcc-riscv64-linux-gnu
          version: 1.0
        if: matrix.target == 'riscv64gc-unknown-linux-gnu'
      - name: Set AWS_LC_SYS_CFLAGS on powerpc-unknown-linux-gnu
        run: echo 'AWS_LC_SYS_CFLAGS="-Wno-stringop-overflow"' >> "$GITHUB_ENV"
        if: matrix.target == 'powerpc-unknown-linux-gnu'
      # The flag below is set to avoid the following error with GCC 11.4.0 on the riscv64 platform:
      # error: 'strncmp' of strings of length 1 and 9 and bound of 9 evaluates to nonzero [-Werror=string-compare]
      - name: Set AWS_LC_SYS_CFLAGS on riscv64gc-unknown-linux-gnu
        run: echo 'AWS_LC_SYS_CFLAGS="-Wno-string-compare"' >> "$GITHUB_ENV"
        if: matrix.target == 'riscv64gc-unknown-linux-gnu'
      - name: Set optimization level 2 for powerpc targets
        run: echo 'CARGO_PROFILE_RELEASE_OPT_LEVEL=2' >> "$GITHUB_ENV"
        if: |
          matrix.target == 'powerpc-unknown-linux-gnu' ||
          matrix.target == 'powerpc64-unknown-linux-gnu' ||
          matrix.target == 'powerpc64le-unknown-linux-gnu'
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install Cargo Deb
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: cargo-deb
      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
      - name: Create Regular Debian Package
        if: startsWith(github.event.ref, 'refs/tags/v')
        run: |
          for PLUGIN in ${{env.PLUGINS}}; do
            # It's important to change into the plugin directory and building each package
            cd "${{ github.workspace }}/plugins/$PLUGIN/crates/plugin"
            cargo deb -p reactive-graph-${{env.PLUGIN_REPOSITORY}}-$PLUGIN --target=${{ matrix.target }} --deb-revision ${{steps.tag.outputs.tag}}
          done
        env:
          VERGEN_IDEMPOTENT: true
      - name: Create Nightly Debian Package
        if: github.ref == 'refs/heads/main'
        run: |
          for PLUGIN in ${{env.PLUGINS}}; do
            # It's important to change into the plugin directory and building each package
            cd "${{ github.workspace }}/plugins/$PLUGIN/crates/plugin"
            cargo deb -p reactive-graph-${{env.PLUGIN_REPOSITORY}}-$PLUGIN --target=${{ matrix.target }} --deb-revision nightly
          done
        env:
          VERGEN_IDEMPOTENT: true
      - name: Upload Regular Debian Package
        uses: svenstaro/upload-release-action@v2
        if: startsWith(github.event.ref, 'refs/tags/v')
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.target }}/debian/libreactive-graph-${{env.PLUGIN_REPOSITORY}}-*_*_*.deb
          file_glob: true
          tag: ${{ github.ref }}
      - name: Upload Nightly Debian Package
        uses: svenstaro/upload-release-action@v2
        if: github.ref == 'refs/heads/main'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.target }}/debian/libreactive-graph-${{env.PLUGIN_REPOSITORY}}-*_*_*.deb
          file_glob: true
          tag: 'nightly'
          overwrite: true
